name: Build Docker Images
# This workflow is triggered on a schedule and can also be triggered manually
on:
  schedule:
    # Every 4 hours
    - cron: '0 */4 * * *'
  workflow_dispatch:
    inputs:
      stream:
        description: 'Flatcar Stream'
        required: true
        default: 'stable'

jobs:
  build:
#    outputs:
#      status: ${{ steps.early.conclusion }}
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    strategy:
      fail-fast: false
      matrix:
        flatcar_track: ['stable', 'beta', 'alpha']
    env:
      GHCR_REGISTRY: ghcr.io
      IMAGE_NAME: flatcar-developer
    steps:
      - name: Checkout
        uses: actions/checkout@v5
      - name: Log in to GHCR
        uses: docker/login-action@v3.5.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download and Convert Flatcar Developer Container
        id: developer_container
        run: |
          set -euo pipefail
          echo "=========================== Check ==========================="
          curl https://${{matrix.flatcar_track}}.release.flatcar-linux.net/amd64-usr/current/version.txt -o version.txt
          cat version.txt
          export $(cat version.txt | xargs)
          echo "FLATCAR_VERSION=${FLATCAR_VERSION}" >> "$GITHUB_ENV"
          echo "FLATCAR_BUILD=${FLATCAR_BUILD}" >> "$GITHUB_ENV"
          echo "flatcar_version=${FLATCAR_VERSION}" >> "$GITHUB_OUTPUT"
          owner="${GITHUB_REPOSITORY_OWNER,,}"
          image_repo="${{ env.GHCR_REGISTRY }}/$owner/${{ env.IMAGE_NAME }}"
          if [ "${{github.event_name}}" != "workflow_dispatch" ]; then
            if docker manifest inspect "${image_repo}:${FLATCAR_VERSION}" > /dev/null 2>&1; then
              echo "Image '${FLATCAR_VERSION}' already exists"
              echo "pushed=false" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          echo "=========================== Download Developer Container ==========================="
          curl -L https://${{matrix.flatcar_track}}.release.flatcar-linux.net/amd64-usr/${FLATCAR_VERSION}/flatcar_developer_container.bin.bz2 -o flatcar_developer_container.bin.bz2
          bunzip2 -k flatcar_developer_container.bin.bz2
          mkdir ${FLATCAR_VERSION}
          sudo mount -o ro,loop,offset=2097152 flatcar_developer_container.bin ${FLATCAR_VERSION}
          sudo tar -cp --one-file-system -C ${FLATCAR_VERSION} . | docker import - "${image_repo}:${FLATCAR_VERSION}"
          rm -rf flatcar_developer_container.bin flatcar_developer_container.bin.bz2
          sudo umount ${FLATCAR_VERSION}
          rmdir ${FLATCAR_VERSION}

          echo "=========================== Push Image ==========================="
          docker push "${image_repo}:${FLATCAR_VERSION}"
          echo "pushed=true" >> "$GITHUB_OUTPUT"

      - name: Create Developer Image with Sources
        id: developer_sources
        run: |
          set -euo pipefail
          echo "=========================== Check ==========================="
          curl https://${{matrix.flatcar_track}}.release.flatcar-linux.net/amd64-usr/current/version.txt -o version.txt
          cat version.txt
          export $(cat version.txt | xargs)
          echo "FLATCAR_VERSION=${FLATCAR_VERSION}" >> "$GITHUB_ENV"
          owner="${GITHUB_REPOSITORY_OWNER,,}"
          image_repo="${{ env.GHCR_REGISTRY }}/$owner/${{ env.IMAGE_NAME }}"
          created="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          source_repo="https://github.com/${GITHUB_REPOSITORY}"
          source_ref="${GITHUB_REF_NAME:-${GITHUB_REF}}"
          revision="${GITHUB_SHA}"
          if [ "${{github.event_name}}" != "workflow_dispatch" ]; then
            if docker manifest inspect "${image_repo}:${FLATCAR_VERSION}-sources" > /dev/null 2>&1; then
              echo "Image '${FLATCAR_VERSION}-sources' already exists"
              echo "pushed=false" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi

          echo "=========================== Build Developer Container w/Sources ==========================="
          docker image build \
            --build-arg IMAGE_REPO=${image_repo} \
            --build-arg FLATCAR_VERSION=${FLATCAR_VERSION} \
            --build-arg FLATCAR_BUILD=${FLATCAR_BUILD} \
            --build-arg FLATCAR_TRACK=${{matrix.flatcar_track}} \
            --build-arg IMAGE_TITLE=${{ env.IMAGE_NAME }} \
            --build-arg SOURCE_REPO=${source_repo} \
            --build-arg SOURCE_REF=${source_ref} \
            --build-arg REVISION=${revision} \
            --build-arg CREATED=${created} \
            --tag "${image_repo}:${FLATCAR_VERSION}-sources" \
            - < Dockerfile

          echo "=========================== Push Images ==========================="
          docker push "${image_repo}:${FLATCAR_VERSION}-sources"
          echo "pushed=true" >> "$GITHUB_OUTPUT"

      - name: Create GitHub release
        if: steps.developer_sources.outputs.pushed == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: flatcar-${{ matrix.flatcar_track }}-${{ steps.developer_container.outputs.flatcar_version }}
          name: Flatcar ${{ matrix.flatcar_track }} ${{ steps.developer_container.outputs.flatcar_version }}
          body: |
            Track: ${{ matrix.flatcar_track }}
            Version: ${{ steps.developer_container.outputs.flatcar_version }}
          prerelease: ${{ matrix.flatcar_track != 'stable' }}
          draft: false
